#include "icm20948_iic.h"

static void Delay_For_Pin(uint8_t nCount)
{
    uint8_t i = 0;
    for (; nCount != 0; nCount--)
    {
        for (i = 0; i < 10; i++)
            ;
    }
}

#define delay_us Delay_For_Pin

// 初始化IIC
void icm_iic_init(void)
{
    __HAL_RCC_GPIOB_CLK_ENABLE();
    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.Pin = GPIO_PIN_13 | GPIO_PIN_15; // 端口配置
    GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;      // 推挽输出
    GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;         // IO口速度为50MHz
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);          // 根据设定参数初始化GPIO
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13 | GPIO_PIN_15, GPIO_PIN_SET);
}

// 产生IIC起始信号
void icm_iic_start(void)
{
    MPU_SDA_OUT(); // sda线输出
    MPU_IIC_SDA = 1;
    ICM_IIC_SCL = 1;
    delay_us(4);
    MPU_IIC_SDA = 0; // START:when CLK is high,DATA change form high to low
    delay_us(4);
    ICM_IIC_SCL = 0; // 钳住I2C总线，准备发送或接收数据
}
// 产生IIC停止信号
void icm_iic_stop(void)
{
    MPU_SDA_OUT(); // sda线输出
    ICM_IIC_SCL = 0;
    MPU_IIC_SDA = 0; // STOP:when CLK is high DATA change form low to high
    delay_us(4);
    ICM_IIC_SCL = 1;
    MPU_IIC_SDA = 1; // 发送I2C总线结束信号
    delay_us(4);
}
// 等待应答信号到来
// 返回值：1，接收应答失败
//         0，接收应答成功
uint8_t icm_iic_wait_ack(void)
{
    uint8_t ucErrTime = 0;
    MPU_SDA_IN(); // SDA设置为输入
    MPU_IIC_SDA = 1;
    delay_us(1);
    ICM_IIC_SCL = 1;
    delay_us(1);
    while (MPU_READ_SDA)
    {
        ucErrTime++;
        if (ucErrTime > 250)
        {
            icm_iic_stop();
            return 1;
        }
    }
    ICM_IIC_SCL = 0; // 时钟输出0
    return 0;
}
// 产生ACK应答
void icm_iic_ack(void)
{
    ICM_IIC_SCL = 0;
    MPU_SDA_OUT();
    MPU_IIC_SDA = 0;
    delay_us(2);
    ICM_IIC_SCL = 1;
    delay_us(2);
    ICM_IIC_SCL = 0;
}
// 不产生ACK应答
void icm_iic_nack(void)
{
    ICM_IIC_SCL = 0;
    MPU_SDA_OUT();
    MPU_IIC_SDA = 1;
    delay_us(2);
    ICM_IIC_SCL = 1;
    delay_us(2);
    ICM_IIC_SCL = 0;
}
// IIC发送一个字节
// 返回从机有无应答
// 1，有应答
// 0，无应答
void icm_iic_send_byte(uint8_t txd)
{
    uint8_t t;
    MPU_SDA_OUT();
    ICM_IIC_SCL = 0; // 拉低时钟开始数据传输
    for (t = 0; t < 8; t++)
    {
        MPU_IIC_SDA = (txd & 0x80) >> 7;
        txd <<= 1;
        delay_us(2);
        ICM_IIC_SCL = 1;
        delay_us(2);
        ICM_IIC_SCL = 0;
        delay_us(2);
    }
}
// 读1个字节，ack=1时，发送ACK，ack=0，发送nACK
uint8_t icm_iic_read_byte(unsigned char ack)
{
    unsigned char i, receive = 0;
    MPU_SDA_IN(); // SDA设置为输入
    for (i = 0; i < 8; i++)
    {
        ICM_IIC_SCL = 0;
        delay_us(2);
        ICM_IIC_SCL = 1;
        receive <<= 1;
        if (MPU_READ_SDA)
            receive++;
        delay_us(1);
    }
    if (!ack)
        icm_iic_nack(); // 发送nACK
    else
        icm_iic_ack(); // 发送ACK
    return receive;
}

// IIC连续写, 返回值:0,正常 , 其他,错误代码
uint8_t icm_write_len(uint8_t addr, uint8_t reg, uint8_t len, uint8_t *buf)
{
    uint8_t i;
    icm_iic_start();
    icm_iic_send_byte((addr << 1) | 0); // 发送器件地址+写命令
    if (icm_iic_wait_ack())             // 等待应答
    {
        icm_iic_stop();
        return 1;
    }
    icm_iic_send_byte(reg); // 写寄存器地址
    icm_iic_wait_ack();     // 等待应答
    for (i = 0; i < len; i++)
    {
        icm_iic_send_byte(buf[i]); // 发送数据
        if (icm_iic_wait_ack())    // 等待ACK
        {
            icm_iic_stop();
            return 1;
        }
    }
    icm_iic_stop();
    return 0;
}

// IIC连续读, 返回值:0,正常 , 其他,错误代码
uint8_t icm_read_len(uint8_t addr, uint8_t reg, uint8_t len, uint8_t *buf)
{
    icm_iic_start();
    icm_iic_send_byte((addr << 1) | 0); // 发送器件地址+写命令
    if (icm_iic_wait_ack())             // 等待应答
    {
        icm_iic_stop();
        return 1;
    }
    icm_iic_send_byte(reg); // 写寄存器地址
    icm_iic_wait_ack();     // 等待应答
    icm_iic_start();
    icm_iic_send_byte((addr << 1) | 1); // 发送器件地址+读命令
    icm_iic_wait_ack();                 // 等待应答
    while (len)
    {
        if (len == 1)
            *buf = icm_iic_read_byte(0); // 读数据,发送nACK
        else
            *buf = icm_iic_read_byte(1); // 读数据,发送ACK
        len--;
        buf++;
    }
    icm_iic_stop(); // 产生一个停止条件
    return 0;
}

// IIC写一个字节, 返回值:0,正常 , 其他,错误代码
uint8_t icm_write_byte(uint8_t addr, uint8_t reg, uint8_t data)
{
    icm_iic_start();
    icm_iic_send_byte((addr << 1) | 0); // 发送器件地址+写命令
    if (icm_iic_wait_ack())             // 等待应答
    {
        icm_iic_stop();
        return 1;
    }
    icm_iic_send_byte(reg);  // 写寄存器地址
    icm_iic_wait_ack();      // 等待应答
    icm_iic_send_byte(data); // 发送数据
    if (icm_iic_wait_ack())  // 等待ACK
    {
        icm_iic_stop();
        return 1;
    }
    icm_iic_stop();
    return 0;
}

// IIC读一个字节, 返回值:0,正常 , 其他,错误代码
uint8_t icm_read_byte(uint8_t addr, uint8_t reg)
{
    uint8_t res;
    icm_iic_start();
    icm_iic_send_byte((addr << 1) | 0); // 发送器件地址+写命令
    icm_iic_wait_ack();                 // 等待应答
    icm_iic_send_byte(reg);             // 写寄存器地址
    icm_iic_wait_ack();                 // 等待应答
    icm_iic_start();
    icm_iic_send_byte((addr << 1) | 1); // 发送器件地址+读命令
    icm_iic_wait_ack();                 // 等待应答
    res = icm_iic_read_byte(0);         // 读数据,发送nACK
    icm_iic_stop();                     // 产生一个停止条件
    return res;
}

void icm_scanf_addr(void)
{
    uint8_t i2c_count = 0;
    icm_iic_init();
    MPU_ADDR_CTRL();
    for (int i = 1; i < 128; i++)
    {
        icm_iic_start();
        icm_iic_send_byte(i << 1);
        if (icm_iic_wait_ack())
        {
            if (i == 127)
            {
                printf("MPU IIC Scanf End, Count=%d\n", i2c_count);
            }
            continue;
        }
        icm_iic_stop();
        i2c_count++;
        printf("MPU IIC Found address:0x%2x\n", i);
    }
}
